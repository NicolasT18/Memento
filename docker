 ____             _
|  _ \  ___   ___| | _____ _ __
| | | |/ _ \ / __| |/ / _ \ '__|
| |_| | (_) | (__|   <  __/ |
|____/ \___/ \___|_|\_\___|_|


     _               _                            __ _
 ___| |_ ___ _ __   / |           ___ ___  _ __  / _(_) __ _
/ __| __/ _ \ '_ \  | |  _____   / __/ _ \| '_ \| |_| |/ _` |
\__ \ ||  __/ |_) | | | |_____| | (_| (_) | | | |  _| | (_| |
|___/\__\___| .__/  |_|          \___\___/|_| |_|_| |_|\__, |
            |_|                                        |___/


Use docker without need sudo :
	add user in the docker group and restart compute

Start docker deamon :
	systemctl start docker
	systemctl enable docker	#for automatically start docker demon when you start the computer


     _               ____            _
 ___| |_ ___ _ __   |___ \          (_)_ __ ___   __ _  __ _  ___
/ __| __/ _ \ '_ \    __) |  _____  | | '_ ` _ \ / _` |/ _` |/ _ \
\__ \ ||  __/ |_) |  / __/  |_____| | | | | | | | (_| | (_| |  __/
|___/\__\___| .__/  |_____|         |_|_| |_| |_|\__,_|\__, |\___|
            |_|                                        |___/


Write image :
	vim Dockerfile	#Create a file nammed "Dockerfil" to contains the image instructions


Example Dockerfile :
--------------------------------------------
FROM php:7.4.4-apache                         #Start from another image

RUN apt-get update && apt-get install -y      #get and install all update on new container

RUN docker-php-ext-install mysqli pdo_mysql   #command from php image for install php extension

COPY . /var/www/html/                         #Copy file in the current folder to the container folder
--------------------------------------------


Create image :
	docker build . -t <name>   #. for Dockerfil in current folder #-t for name

Show all images :
	docker images

Delete image :
	docker rmi <image>

Download image :
	docker pull <image>



     _               _____                           _        _
 ___| |_ ___ _ __   |___ /            ___ ___  _ __ | |_ __ _(_)_ __   ___ _ __
/ __| __/ _ \ '_ \    |_ \   _____   / __/ _ \| '_ \| __/ _` | | '_ \ / _ \ '__|
\__ \ ||  __/ |_) |  ___) | |_____| | (_| (_) | | | | || (_| | | | | |  __/ |
|___/\__\___| .__/  |____/           \___\___/|_| |_|\__\__,_|_|_| |_|\___|_|
            |_|

Only for one container, for more, see step 4 - compose. (like 3 for php, mysql, phpmyadmin)

Start container :
	docker run <image>
	docker run -it <image> bash   #-it for interactive image #bash for launch bash in the image
	docker run -d <image>	      #-d detach for run container in background
	docker run -p 3001:80 <image> #-p for run on a different port to 80
	docker run -v "$(pwd)":/var/www/html   #sync current folder : to container folder

Show list of container ON :
	docker ps   	#show all container is current running
	docker ps -a	#show all container

Run command un container :
	docker exec <container> <command>
	docker exec -it <container> bash   #enter in bash to the container

Stop container :
	docker stop <container>

Delete container :
	docker rm <container>

Show logs container ;
	docker logs -f <container>   #-f for see the logs in real time



     _               _  _
 ___| |_ ___ _ __   | || |             ___ ___  _ __ ___  _ __   ___  ___  ___
/ __| __/ _ \ '_ \  | || |_   _____   / __/ _ \| '_ ` _ \| '_ \ / _ \/ __|/ _ \
\__ \ ||  __/ |_) | |__   _| |_____| | (_| (_) | | | | | | |_) | (_) \__ \  __/
|___/\__\___| .__/     |_|            \___\___/|_| |_| |_| .__/ \___/|___/\___|
            |_|                                          |_|              

With previous step, only a container with php is launch, 
but we need to 3 container for php, mysqli and phpmyadmin.

For that, we use docker-container, this command allows to launch sveral container. 
(in this case, 3 container for php, mysqli and phpmyadmin)


Write docker composer :
	vim docker-compose.yml

Exemple docker-composer :
----------------------------------------
version: "3.7"				#choose which versio to docker-compose use
services:				#Contains the container to start
  php:					#Contains the parameters of the php containers
    build:				#If you want use a Dockerfile for this container
      context: .			#set the Dockerfile location
    image: nicolast18/php-mysql:1.0.0	#set the image you want use for this container
    networks:				#set all network you want use for attach containers
      - backend
    environment:			#set value in environment variable
      - MYSQL_HOST=nt18-mysql-app
      - MYSQL_USER=nicolast18
      - MYSQL_PASSWORD=1812
      - MYSQL_DB=nt18_db
    volumes:				#sync volumes computer:container
      - ./www/:/var/www/html/
    ports:				#set the port you want use for connect
      - "80:80"
    container_name: nt18-php-app	#set the name container
  mysql:
    image: mysql:8.0.19
    networks:
      - backend    
  environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_USER=nicolast18
      - MYSQL_PASSWORD=1812
      - MYSQL_DATABASE=nt18_db
    volumes:
      - ./db/:/var/lib/mysql
    container_name: nt18-mysql-app
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:5.0.2
    depends_on:
      - mysql
    networks:
      - backend
    ports:
      - "30001:80"
    environment:
      - PMA_HOST=nt18-mysql-app
      - PMA_PORT= 3306
    container_name: nt18-phpmyadmin-app
networks:				#Create all network you want use for attach container
  backend:
----------------------------------------
   

launch docker-compose.yml :
	docker-compose up --build   #--build if all images is not dl
